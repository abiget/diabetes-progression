print(conf_mat)
# accuracy, which is not a good indicator of fit for imbalance data but we now biased towards the Yes class it's fair
acc <- mean(knn_pred == y_test)
print("Accuracy:")
print(acc)
}
#Plot recall (TPR) over possible k with atleast 85% TPR
plot_recall_vs_k(recallk_df, threshold_top)
print(c("Possible ks:", threshold_top))
knn_k_top(threshold_top[2])
print(c("Possible ks:", threshold_top))
#Plot recall (TPR) over possible k with atleast 85% TPR
plot_recall_vs_k(recallk_df, threshold_top)
install.packages("vctrs")
install.packages(c("pillar", "tibble", "tidyselect", "dplyr", "stringr", "purrr", "tidyr"))
install.packages("tidyverse")
setwd("~/Documents/courses/1st_year/2nd_term/statistical learning/labs/homeworks/h2/diabetes-progression")
install.packages("tidyverse")
knitr::opts_chunk$set(warning=FALSE,
message=FALSE,
tidy.opts=list(width.cutoff = 80),
tidy = FALSE)
library(pROC)
#library(caret)
library(tidyverse)
library(class)
library(ggplot2)
library(dplyr)
if (!require(ROCR)) {
install.packages(ROCR)
library(ROCR)
}
#load the data set and view data
data_df <- read.table("db.txt", header = TRUE)
data_size = dim(data_df)
View(data_df)
sprintf("Records: %d Features: %d", data_size[1], data_size[2])
head(db_df)
head(data_df)
#check missing values
check_missing_values <- function(data) {
sprintf("#NaN values: %d", sum(is.na(data)))
colSums(is.na(data))
}
check_missing_values(data_df)
str(db_df)
str(data_df)
# convert categorical 'sex' into factor
data_df$sex <- as.factor(data_df$sex)
#check structure again
str(data_df)
summary(data_df)
#check structure and compute Pearson's r correlation
str(data_df)
correlation <- cor(dplyr::select(data_df, -sex))
correlation
#DBP and BMI (0.38): This is a moderate positive correlation. This suggests that higher blood pressure tends to be associated with higher BMI, which is a common finding in #health data (e.g., obesity is linked with high blood pressure).Age and Cholesterol (0.27): This is a moderate positive correlation. As age increases, cholesterol levels #tend to increase as well. This is worth noting since age is a known risk factor for heart-related conditions.
#check structure and compute Pearson's r correlation
correlation <- cor(dplyr::select(data_df, -sex))
correlation
#DBP and BMI (0.38): This is a moderate positive correlation. This suggests that higher blood pressure tends to be associated with higher BMI, which is a common finding in #health data (e.g., obesity is linked with high blood pressure).Age and Cholesterol (0.27): This is a moderate positive correlation. As age increases, cholesterol levels #tend to increase as well. This is worth noting since age is a known risk factor for heart-related conditions.
# a high class imbalance between the target class
ggplot(your_data, aes(x = BMI, y = progr)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(title = "BMI vs Progr", x = "BMI", y = "Progr")
# a high class imbalance between the target class
ggplot(data_df, aes(x = BMI, y = progr)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(title = "BMI vs Progr", x = "BMI", y = "Progr")
#prop.table(table(data_df$CHD))
# a high class imbalance between the target class
ggplot(data_df, aes(x = BMI, y = progr)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(title = "BMI vs Progr", x = "BMI", y = "Progr")+
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
#prop.table(table(data_df$CHD))
# a high class imbalance between the target class
ggplot(data_df, aes(x = BMI, y = progr)) +
geom_point() +
#geom_smooth(method = "lm") +
theme_minimal() +
labs(title = "BMI vs Progr", x = "BMI", y = "Progr")+
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
#prop.table(table(data_df$CHD))
# a high class imbalance between the target class
ggplot(data_df, aes(x = BMI, y = progr)) +
geom_point() +
theme_minimal() +
labs(title = "BMI vs Progr", x = "BMI", y = "Progr")+
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
ggplot(data_df, aes(x = BP, y = progr)) +
geom_point() +
theme_minimal() +
labs(title = "BP vs Progr", x = "BP", y = "Progr")+
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
#prop.table(table(data_df$CHD))
# a high class imbalance between the target class
ggplot(data_df, aes(x = BMI, y = progr)) +
geom_point() +
theme_minimal() +
labs(title = "BMI vs Progr", x = "BMI", y = "Progr")+
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
ggplot(data_df, aes(x = BP, y = progr)) +
geom_point() +
theme_minimal() +
labs(title = "BP vs Progr", x = "BP", y = "Progr")+
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
ggplot(data_df, aes(x = TG, y = progr)) +
geom_point() +
theme_minimal() +
labs(title = "TG vs Progr", x = "TG", y = "Progr")+
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
#prop.table(table(data_df$CHD))
#age and sex make sense; which is normally high for male but as menopause starts it's getting worst for females
ggplot(data = data_df, aes(x = sex, y = progr)) +
geom_boxplot(color = "black") +
labs(title = "Age by CHD and Sex", x = "CHD", y = "Age") +
scale_fill_manual(values = c("skyblue", "lightpink")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
ggplot(data = data_df, aes(x = factor(sex, levels=c(0, 1), labels=c("Male", "Female")), y = Progr)) +
geom_boxplot(color = "black", fill="skyblue") +
labs(title = "Progr vs Sex", x = "SEX", y = "Progr") +
scale_fill_manual(values = c("skyblue", "lightpink")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
ggplot(data = data_df, aes(x = factor(sex, levels=c(1, 2), labels=c("Male", "Female")), y = Progr)) +
geom_boxplot(color = "black", fill="skyblue") +
labs(title = "Progr vs Sex", x = "SEX", y = "Progr") +
scale_fill_manual(values = c("skyblue", "lightpink")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
ggplot(data = data_df, aes(x = factor(sex, levels=c(1, 2), labels=c("Male", "Female")), y = Progr)) +
geom_boxplot(color = "black", fill="skyblue") +
labs(title = "Progr vs Sex", x = "SEX", y = "Progr") +
scale_fill_manual(values = c("skyblue", "lightpink")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
ggplot(data = data_df, aes(x = factor(sex, levels=c(1, 2), labels=c("Male", "Female")), y = Progr)) +
geom_boxplot(color = "black") +
labs(title = "Progr vs Sex", x = "SEX", y = "Progr") +
scale_fill_manual(values = c("skyblue", "lightpink")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
ggplot(data = data_df, aes(x = factor(sex, levels=c(1, 2), labels=c("Male", "Female")), y = progr)) +
geom_boxplot(color = "black", fill="skyblue") +
labs(title = "Progr vs Sex", x = "SEX", y = "Progr") +
scale_fill_manual(values = c("skyblue", "lightpink")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
str(data_df)
library(ggplot2)
library(reshape2)
install.packages("reshape2")
library(ggplot2)
library(reshape2)
corr_melt <- melt(cor_matrix)
library(ggplot2)
library(reshape2)
corr_melt <- melt(correlation)
ggplot(corr_melt, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low="blue", mid="white", high="red", midpoint=0) +
theme_minimal() +
labs(title="Correlation Heatmap")
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
library(ggplot2)
library(reshape2)
corr_melt <- melt(correlation)
ggplot(corr_melt, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low="blue", mid="white", high="red", midpoint=0) +
theme_minimal() +
labs(title="Correlation Heatmap")
#theme(
# plot.title = element_text(hjust = 0.5, size = 14),
#axis.title = element_text(size = 12)
#)
library(ggplot2)
library(reshape2)
corr_melt <- melt(correlation)
ggplot(corr_melt, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low="blue", mid="white", high="red", midpoint=0) +
theme_minimal() +
labs(title="Correlation Heatmap", x="Variables", y="Variables") +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
library(ggplot2)
library(reshape2)
corr_melt <- melt(correlation)
ggplot(corr_melt, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low="blue", mid="white", high="red", midpoint=0) +
theme_minimal() +
labs(title="Correlation Heatmap", x="", y="") +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
installed.packages("GGally")
ggplot(data_df, aes(x = BMI)) +
geom_density(fill="lightblue") +
theme_minimal() +
labs(title = "BMI Density Plot")
ggplot(data_df, aes(x = BMI)) +
geom_density(fill="lightblue") +
theme_minimal() +
labs(title = "BMI Density Plot")
ggplot(data = data_df, aes(x = factor(sex, levels=c(1, 2), labels=c("Male", "Female")), y = progr)) +
geom_boxplot(color = "black", fill="skyblue") +
labs(title = "Progr vs Sex", x = "SEX", y = "Progr") +
scale_fill_manual(values = c("skyblue", "lightpink")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
install.packages("resample")
# Fit the decision tree model
dec_tree_model <- tree(progr ~ ., data = data)
# Fit the decision tree model
dec_tree_model <- tree(progr ~ ., data = data_df)
library(pROC)
library(caret)
library(tidyverse)
library(class)
library(ggplot2)
library(dplyr)
if (!require(ROCR)) {
install.packages(ROCR)
library(ROCR)
}
library(tree)
# Fit the decision tree model
dec_tree_model <- tree(progr ~ ., data = data_df)
summary(dec_tree_model)
plot(dec_tree_model)
plot(dec_tree_model)
text(dec_tree_model, pretty = 0)
plot(dec_tree_model)
text(dec_tree_model, pretty = 2)
plot(dec_tree_model)
text(dec_tree_model, pretty = 1)
plot(dec_tree_model)
text(dec_tree_model, pretty = 1)
plot(dec_tree_model)
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
plot(dec_tree_model, col = "blue", main = "Disease Progression: Unpruned Tree")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
plot(dec_tree_model, col = "blue", main = "Disease Progression: Unpruned Tree",
cex.main = 1.5, cex.axis = 1.2)
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
plot(dec_tree_model, col = "blue", main = "Disease Progression: Unpruned Tree",
cex.main = 1.5, cex.axis = 1.2, cex.lab = 1.2)
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
plot(dec_tree_model, col = "blue", main = "Disease Progression: Unpruned Tree",
cex.main = 1.5, cex.axis = 1.2, cex.lab = 1.2, size = 1.5)
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
plot(dec_tree_model, col = "blue", main = "Disease Progression: Unpruned Tree")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
cv_dec_tree_model <- cv.tree(dec_tree_model)
plot(cv.boston$size , cv.boston$dev , type = "b")
cv_dec_tree_model <- cv.tree(dec_tree_model)
plot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b")
cv_dec_tree_model <- cv.tree(dec_tree_model)
plot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b",
xlab = "Tree Size", ylab = "Deviance",
main = "Cross-Validation of Tree Size")
cv_dec_tree_model <- cv.tree(dec_tree_model)
plot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b",
xlab = "Tree Size", ylab = "Deviance",
main = "Cross-Validation of Tree Size")
ggplot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b",
xlab = "Tree Size", ylab = "Deviance",
main = "Cross-Validation of Tree Size") +
geom_vline(xintercept = 5, linetype = "dashed", color = "red") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
cv_dec_tree_model <- cv.tree(dec_tree_model)
plot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b",
xlab = "Tree Size", ylab = "Deviance",
main = "Cross-Validation of Tree Size")
ggplot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b",
xlab = "Tree Size", ylab = "Deviance",
main = "Cross-Validation of Tree Size") +
#geom_vline(xintercept = 5, linetype = "dashed", color = "red") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
cv_dec_tree_model <- cv.tree(dec_tree_model)
plot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b",
xlab = "Tree Size", ylab = "Deviance",
main = "Cross-Validation of Tree Size")
ggplot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b",
xlab = "Tree Size", ylab = "Deviance",
main = "Cross-Validation of Tree Size") +
geom_vline(xintercept = 5, linetype = "dashed", color = "red") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12)
)
cv_dec_tree_model <- cv.tree(dec_tree_model)
plot(cv_dec_tree_model$size , cv_dec_tree_model$dev , type = "b",
xlab = "Tree Size", ylab = "Deviance",
main = "Cross-Validation of Tree Size")
# Prune the tree
pruned_tree <- prune.tree(dec_tree_model, best = 5)
plot(pruned_tree, col = "blue")
text(pruned_tree, pretty = 1)
title("Disease Progression: Pruned Tree")
# Prune the tree
pruned_tree <- prune.tree(dec_tree_model, best = 5)
summary(pruned_tree)
plot(pruned_tree, col = "blue")
text(pruned_tree, pretty = 1)
title("Disease Progression: Pruned Tree")
# Prune the tree
pruned_tree <- prune.tree(dec_tree_model, best = 5)
summary(pruned_tree)
# mean squared error
mse <- mean((data_df$progr - predict(pruned_tree, data_df))^2)
sprintf("Mean Squared Error: %f", mse)
plot(pruned_tree, col = "blue")
text(pruned_tree, pretty = 1)
title("Disease Progression: Pruned Tree")
# Prune the tree
pruned_tree <- prune.tree(dec_tree_model, best = 5)
summary(pruned_tree)
# mean squared error
mse <- mean((data_df$progr - predict(pruned_tree, data_df))^2)
sprintf("Mean Squared Error: %f", mse)
plot(pruned_tree, col = "blue")
text(pruned_tree, pretty = 1)
title("Disease Progression: Pruned Tree")
# Set graphical parameters for better plot readability
par(mar = c(5, 5, 5, 5))  # Increase margins
# Plot the tree with larger labels
plot(pruned_tree, main = "Decision Tree", cex = 1.5)
text(pruned_tree, pretty = 0, cex = 1.2)  # Increase the size of the text
# Prune the tree
pruned_tree <- prune.tree(dec_tree_model, best = 5)
summary(pruned_tree)
# mean squared error
mse <- mean((data_df$progr - predict(pruned_tree, data_df))^2)
sprintf("Mean Squared Error: %f", mse)
par(mar = c(5, 5, 5, 5))  # Increase margins
plot(pruned_tree, col = "blue")
text(pruned_tree, pretty = 1)
title("Disease Progression: Pruned Tree")
par(mar = c(5, 5, 5, 5))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
par(mar = c(1, 1, 1, 1))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
par(mar = c(1, 2, 2, 1))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
par(mar = c(2, 2, 2, 2))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
#par(mar = c(2, 2, 2, 2))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
par(mar = c(2, 2, 2, 2))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
par(mar = c(2, 2, 2, 2))
# increase height of the plot
# how to increase the plot height
# plot the unpruned tree
par(mfrow = c(1, 1))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
par(mar = c(2, 2, 2, 2))
# increase height of the plot
# how to increase the plot height
# plot the unpruned tree
par(mfrow = c(2, 2))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
#par(mar = c(2, 2, 2, 2))
# increase height of the plot
# how to increase the plot height
# plot the unpruned tree
par(mfrow = c(1, 1))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
#par(mar = c(2, 2, 2, 2))
# increase height of the plot
# how to increase the plot height
# plot the unpruned tree
#par(mfrow = c(1, 1))
plot(dec_tree_model, col = "blue")
text(dec_tree_model, pretty = 1)
title("Disease Progression: Unpruned Tree")
# Prune the tree
pruned_tree <- prune.tree(dec_tree_model, best = 5)
summary(pruned_tree)
# mean squared error
mse <- mean((data_df$progr - predict(pruned_tree, data_df))^2)
sprintf("Mean Squared Error: %f", mse)
par(mar = c(5, 5, 5, 5))
plot(pruned_tree, col = "blue")
text(pruned_tree, pretty = 1)
title("Disease Progression: Pruned Tree")
# Prune the tree
pruned_tree <- prune.tree(dec_tree_model, best = 5)
summary(pruned_tree)
# mean squared error
# Predict on the same data to calculate RMSE (for training data)
predictions <- predict(pruned_tree, data_df)
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean((predictions - data_df$progr)^2))
print(paste("RMSE: ", rmse))
par(mar = c(5, 5, 5, 5))
plot(pruned_tree, col = "blue")
text(pruned_tree, pretty = 1)
title("Disease Progression: Pruned Tree")
# Prune the tree
pruned_tree <- prune.tree(dec_tree_model, best = 5)
summary(pruned_tree)
# Predict on the same data to calculate RMSE (for training data)
predictions <- predict(pruned_tree, data_df)
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean((predictions - data_df$progr)^2))
print(paste("RMSE: ", rmse))
par(mar = c(5, 5, 5, 5))
plot(pruned_tree, col = "blue")
text(pruned_tree, pretty = 1)
title("Disease Progression: Pruned Tree")
